class Solution {
    public int minCut(String s) {


        
        boolean[][] dp = new boolean[s.length()][s.length()];
        for(int i=0;i<s.length();i++){
            dp[i][i] = true;
        }
        int maxlen =1;
        for(int st = s.length()-1;st>=0;st--){
            for(int end = st+1;end<s.length();end++){
                if(s.charAt(st)==s.charAt(end)){
                    if(end-st==1 || dp[st+1][end-1]){
                        dp[st][end] = true;
                        
                    }
                }
            }
        }
        int[] cuts = new int[s.length()];
    for (int startIndex = s.length() - 1; startIndex >= 0; startIndex--) {
      int minCuts = s.length(); // maximum cuts
      for (int endIndex = s.length() - 1; endIndex >= startIndex; endIndex--) {
        if (dp[startIndex][endIndex]) {
          // we can cut here as we got a palindrome
          // also we dont need any cut if the whole substring is a palindrome
          minCuts = (endIndex == s.length() - 1) ? 0 : Math.min(minCuts, 1 + cuts[endIndex + 1]);
        }
      }
      cuts[startIndex] = minCuts;
    }

    return cuts[0];
    }
}

Time Complexity: O(N*N)
