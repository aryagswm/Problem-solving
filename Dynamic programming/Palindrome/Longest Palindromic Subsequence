Given a sequence, find the length of its Longest Palindromic Subsequence (LPS). In a palindromic subsequence, elements read the same backward and forward.

I/P: abdbca
O/P: 5(abdba)

public int lps(String s){
  dp[][] = new int[s.length()][s.length()];
  
  for(int i=0;i<s.length();i++){
    dp[i][i] = 1;
    }
  for(int st = s.length()-1; st>=0;st--){
      for(int end = st+1;end<s.length();end++){
        if(s.charAt(st)==s.charAt(end)){
          dp[st][end] = 2+ dp[st+1][end-1];
        }
        else{
          dp[st][end] = Math.max(dp[st+1][end], dp[st][end-1]);
        }
  }
  return dp[0][s.length()-1];
  
  }
  
- Time Complexity: O(N*N)  

